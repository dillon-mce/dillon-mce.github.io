<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Develop with Dillon</title>
    <link>https://dillon-mce.com/posts/</link>
    <description>Recent content in Posts on Develop with Dillon</description>
    <image>
      <url>https://dillon-mce.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dillon-mce.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dillon-mce.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming Resources</title>
      <link>https://dillon-mce.com/posts/programming-resources/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/programming-resources/</guid>
      <description>A list of some good resources I&amp;#39;ve come across in my time trying to learn programming. It isn&amp;#39;t comprehensive, but I&amp;#39;ve had some people ask about resources to look into, so I thought I&amp;#39;d put my list together in one place.</description>
    </item>
    
    <item>
      <title>5 Reasons to Use Typealias</title>
      <link>https://dillon-mce.com/posts/reasons-to-use-typealias/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/reasons-to-use-typealias/</guid>
      <description>Swift has many features that allow us as the users of the language to customize how we write code, while still giving us all the protections of a statically typed language. Today we&amp;rsquo;re going to talk about one of those features which seems small, but it packs a lot of punch.
The typealias keyword lets you define a &amp;ldquo;type alias&amp;rdquo;, a custom name for a class, struct or any other existing type in Swift.</description>
    </item>
    
    <item>
      <title>Writing Short Code Isn&#39;t The Point</title>
      <link>https://dillon-mce.com/posts/writing-readable-code/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/writing-readable-code/</guid>
      <description>I don&amp;rsquo;t know about you, but I have spent a lot of time trying to write code in the shortest, most elegant way possible. I have put a lot of thought and time and effort into it over the years. And I see it a lot in other people&amp;rsquo;s code as well. I have seen it from both junior and senior developers. I have seen it in new code bases and mature code bases, both large and small.</description>
    </item>
    
    <item>
      <title>Fixing an Unfixable Bug</title>
      <link>https://dillon-mce.com/posts/fixing-an-unfixable-bug/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/fixing-an-unfixable-bug/</guid>
      <description>If you have been an iOS developer for any length of time, you have certainly come across bugs that are hard to understand and hard to track down. And if you have an app out in the world that real human beings use you have probably encountered a bug or crash that is happening for some subset of your users, but that you cannot for the life of you reproduce on your device.</description>
    </item>
    
    <item>
      <title>Algorithms in Swift - Intro</title>
      <link>https://dillon-mce.com/posts/algorithms-in-swift-intro/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/algorithms-in-swift-intro/</guid>
      <description>In this post, I want to talk about algorithms in general, take a look at the binary search algorithm, and examine how to think about the complexity of an algorithm.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Set up</title>
      <link>https://dillon-mce.com/posts/aoc2018/setup/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/setup/</guid>
      <description>The first (meta) problem with Advent of Code is to figure out how you’re going to organize your code for these challenges. How get the input into a usable format, how to keep things in order and minimize the time it takes, etc.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 7</title>
      <link>https://dillon-mce.com/posts/aoc2018/day7/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day7/</guid>
      <description>My understanding of Day 7’s first problem is given a  series of instructions like the one below, return a String which is the correct order in which the instructions will be executed.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 6</title>
      <link>https://dillon-mce.com/posts/aoc2018/day6/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day6/</guid>
      <description>My understanding of Day 6’s first problem is given a list of coordinates like the one below, return an Int which is the size of the largest open area that isn’t infinite (using Manhattan or taxicab distance) around a point.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 5</title>
      <link>https://dillon-mce.com/posts/aoc2018/day5/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day5/</guid>
      <description>Problem 1 My understanding of Day 5’s first problem is this: given a String like &amp;quot;dabAcCaCBAcCcaDA&amp;quot;, return an Int which is the number of characters remaining after being reduced by removing pairs of letters which are adjacent, the same letter, and opposite cases. For example &amp;quot;cC&amp;quot; and &amp;quot;Aa&amp;quot;. The sample returns 10.
Method My method for solving this problem looks like this:
 Make an outer while loop that will continue until you make it all the way through the String without finding any pairs that can be removed.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 4</title>
      <link>https://dillon-mce.com/posts/aoc2018/day4/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day4/</guid>
      <description>Problem 1 My understanding of Day 4’s first problem is this: given a string like the one below, return an Int that is the minute at which the guard who spent the most total minutes asleep was asleep the most, times that guard’s ID number. The sample data returns 240. Sample data:
[1518-11-01 00:00] Guard #10 begins shift [1518-11-01 00:05] falls asleep [1518-11-01 00:25] wakes up [1518-11-01 00:30] falls asleep [1518-11-01 00:55] wakes up [1518-11-01 23:58] Guard #99 begins shift [1518-11-02 00:40] falls asleep [1518-11-02 00:50] wakes up [1518-11-03 00:05] Guard #10 begins shift [1518-11-03 00:24] falls asleep [1518-11-03 00:29] wakes up [1518-11-04 00:02] Guard #99 begins shift [1518-11-04 00:36] falls asleep [1518-11-04 00:46] wakes up [1518-11-05 00:03] Guard #99 begins shift [1518-11-05 00:45] falls asleep [1518-11-05 00:55] wakes up Method My method for solving this problem looks like this:</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 3</title>
      <link>https://dillon-mce.com/posts/aoc2018/day3/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day3/</guid>
      <description>Problem 1 My understanding of day 3’s first problem is this: given a string that is a list of fabric claims like &amp;quot;#1 @ 1,3: 4x4\n#2 @ 3,1: 4x4\n#3 @ 5,5: 2x2&amp;quot; on a large grid of fabric (with the coordinates starting at the top left), return an Int which is the number square inches claimed more than once. The sample data returns 4.
Method To solve this problem I needed:</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 2</title>
      <link>https://dillon-mce.com/posts/aoc2018/day2/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day2/</guid>
      <description>Problem 1 My understanding of the second day’s first problem was this: given a list of IDs like &amp;quot;abcdef bababc abbcde abcccd aabcdd abcdee ababab&amp;quot;, return a checksum which is the number of IDs that contain exactly two of the same character times the number of IDs that contain exactly three of the same character. IDs can count towards both numbers. The sample returns 12.
Method  Break up the input into an array of the individual IDs Write a function that takes a string and a count (int) and returns a bool that is whether that string contains exactly “count” of any letter Filter the array using that function for count 2 Filter the array using that function for count 3 Multiply the counts of the filtered arrays together  Implementation Again, I start my function by saying let array = string.</description>
    </item>
    
    <item>
      <title>Advent of Code 2018 - Day 1</title>
      <link>https://dillon-mce.com/posts/aoc2018/day1/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dillon-mce.com/posts/aoc2018/day1/</guid>
      <description>Problem 1 My understanding of day 1’s first problem was this: given a string like &amp;quot;+1, -2, +3, +1&amp;quot; , return the Int it reduces to if you add and subtract all the numbers, starting at 0. The actual input was much longer and the elements were separated by newlines instead of spaces, but I accounted for that in my function. The sample data returns 3
Method Here’s how I broke down the problem:</description>
    </item>
    
  </channel>
</rss>
